function fes_params = fes_params_defaults(varargin)
% fes_params = fes_params_defaults(varargin)
% 
% function to prepare all of the parameters to run real-time FES using the 
% "realtime_Wrapper" function. Without inputs, the function just spits out
% the default parameter structure. If an input is a struct, it populates
% any unfilled parameters with the default values. If inputs are name/value
% pairs, it will populate a structure with the inputs and fill the rest of
% the structure with the defaults.
%
% This function is a cleaned up version of "bmi_params_defaults", which was
% used with "runBMIFES". I removed unused parameters and added flags to
% differentiate between Cerebus and Plexon
%
% Edited 2018/02/01 KLB
%
% -- settings [defaults]--
%   'sigmoid'       : flag to decide whether or not to apply a sigmoid to
%                       emg preds [false]
%   'output'        : either 'stimulator' or 'none' [stimulator] (not
%                       implemented)
%   'online'        : chose between online(true) or offline(false) [true]
%   'offline_data'  : binnedData file to be replayed (when 'online'=false)
%                       [NaN]
%   'hp_rc'         : high-pass filter time constant in seconds (0 = no filtering of preds)
%   'pred_bounds'   : upper_bound for predictions in Hz [300]
%
%   'stim_params'   : structure containing emg-to-stim parameters and electrode to muscle mapping
%   'decoder'       : structure containing decoder or .mat file
%   'n_neurons'     : Number of neurons
%   'neuronIDs'     : Array of n_neurons x 2, containing (ch_id, unit_id);
%   'n_lag'         : Number of lags to use [10]
%   'binsize'       : Cycle time for decoder. Has to match binsize in decoders
%
%   'display_plots' : Plot adaptation procedure [true]
%   'save_dir'      : directory for saving data
%   'save_name'     : prefix for saving files names
%
%   'cort_source'   : 'Plexon' or 'Blackrock' [Blackrock]


fes_params_defaults = struct(...
    'sigmoid',          false,...
    'output',           'stimulator',...
    'offline_data',     NaN,...
    'hp_rc',            0,...
    'pred_bounds',      300,...
    'stim_params',      stim_params_defaults,...
    'decoder',          neuron_decoder_default,...
    
%   'sigmoid'       : flag to decide whether or not to apply a sigmoid to
%                       emg preds [false]
%   'output'        : either 'stimulator' or 'none' [stimulator] (not
%                       implemented)
%   'online'        : chose between online(true) or offline(false) [true]
%   'offline_data'  : binnedData file to be replayed (when 'online'=false)
%                       [NaN]
%   'hp_rc'         : high-pass filter time constant in seconds (0 = no filtering of preds)
%   'pred_bounds'   : upper_bound for predictions in Hz [400]
%
%   'stim_params'   : structure containing emg-to-stim parameters and electrode to muscle mapping
%   'decoder'       : structure containing decoder or .mat file
%   'n_neurons'     : Number of neurons
%   'neuronIDs'     : Array of n_neurons x 2, containing (ch_id, unit_id);
%   'n_lag'         : Number of lags to use [10]
%   'binsize'       : Cycle time for decoder. Has to match binsize in decoders
%
%   'display_plots' : Plot adaptation procedure [true]
%   'save_dir'      : directory for saving data
%   'save_name'     : prefix for saving files names
%
%   'cort_source'   : 'Plexon' or 'Blackrock' [Blackrock]

bmi_params_defaults = struct( ...
    'decoders'      ,default_bmi_decoders,...
    'mode'          ,'direct',...
    'adapt'         ,false,...
    'cursor_assist' ,false,...
    'cursor_traj'   ,curs_traj_default,...
    'neuron_decoder',N2E,...
    'emg_decoder'   ,E2F,...
    'sigmoid'       ,false,...
    'emg_convolve'  ,[],...
    'emg_thresh'    ,0,...
    'output'        ,'xpc',...
    'online'        ,true,...
    'realtime'      ,true,...
    'offline_data'  ,'Jango_20141203_default_offline_data.mat',...
    'hp_rc'         ,0,...
    'bmi_fes_stim_params'   ,bmi_fes_stim_params_defaults,...
    'pred_bounds'   ,[inf inf],...
    ...
    'n_neurons'     ,32,...
    'neuronIDs'     ,[[1:16 33:48]' zeros(32,1)],...
    'n_lag'         ,10,...
    'n_emgs'        ,5,...
    'n_lag_emg'     ,1,...
    'n_forces'      ,2,...
    'binsize'       ,0.05,... 
    'db_size'       ,34,...
    'ave_fr'        ,0,...
    ...
    'adapt_params'  ,adapt_params_defaults,...
    ...
    'display_plots' ,true,...
    'print_out'     ,true,...
    'save_data'     ,true,...
    'save_dir'      ,cd,...
    'save_name'     ,'BMI_test',...
    ...
    'force_offset'  ,[0 0],...
    'stop_trial'    ,0, ...
    'stop_task_if_x_artifacts', 10, ...
    'stop_task_if_x_force',     0.02, ...
    'offset_time_constant',     1.0000e+72, ...
    'spike_chan_names', [] ...
);


% fill default options missing from input argument
if nargin
    fes_params = varargin{1};
    if isfield(fes_params,'adapt_params')
        % fill up the adapt_params substructure if present.
        fes_params.adapt_params = adapt_params_defaults(fes_params.adapt_params);
    end
else
    fes_params = [];
end

% fill default BMI-FES params missing from input argument
if nargin
    if isfield(fes_params,'bmi_fes_stim_params')
       fes_params.bmi_fes_stim_params = bmi_fes_stim_params_defaults(fes_params.bmi_fes_stim_params);
    end
end


all_param_names = fieldnames(bmi_params_defaults);
for i=1:numel(all_param_names)
    if ~isfield(fes_params,all_param_names(i))
        fes_params.(all_param_names{i}) = bmi_params_defaults.(all_param_names{i});
    end
end
